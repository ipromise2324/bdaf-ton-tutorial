#include "imports/stdlib.fc";

{-
    recv_internal() :
    1. Deposit
    2. Owner withdraw
    3. Change owner
    4. Transfer message to owner
    5. Update smc code
-}

global int seqno; ;; Prevnet replay attack
global int publicKey;
global slice ownerAddress;

;; Load storage of thid contract
() load_data() inline {
    ;; Load contract storage cell and converts into slice.
    slice ds = get_data().begin_parse(); 

    ;; Populates storage variables.
    seqno = ds~load_uint(32);
    publicKey = ds~load_uint(256);
    ownerAddress = ds~load_msg_addr();

    ;; Checks if slice is empty. If not, throws an exception.
    ds.end_parse(); 
}

;; Store storage of this contract
() store_data(int seqno, int public_key, slice owner_address) impure inline {
    set_data(
        begin_cell()
            .store_uint(seqno, 32)
            .store_uint(public_key, 256)
            .store_slice(owner_address)
        .end_cell()
    );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op

    ;; Deposit operation: it will send TONs to the owner directly, so we don't have to do anything
    if(op == "deposit"c) { ;; convert to int by 'c'
        return ();
    }

    ;; Transfer messages to owner
    if(op == "transfer_msg_to_owner"c) {
        ifnot (equal_slices(sender_address, owner_address)) {
            cell msg_cell = begin_cell().store_slice(in_msg_body).end_cell();
            cell msg = begin_cell()
                .store_uint(0x18, 6) ;; nobounceable - 0x10, logs - 0x30
                .store_slice(owner_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_slice(sender_address)
                .store_ref(msg_cell)
            .end_cell();
        send_raw_message(msg, 64);
        }
        return ();                
    }
}
